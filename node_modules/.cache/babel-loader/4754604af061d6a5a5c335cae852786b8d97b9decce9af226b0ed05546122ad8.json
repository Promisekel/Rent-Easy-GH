{"ast":null,"code":"var _jsxFileName = \"J:\\\\Github\\\\Rent Easy GH\\\\ghana-rental-platform\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile, sendPasswordResetEmail } from 'firebase/auth';\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\nimport { auth, googleProvider, db } from '../config/firebase';\nimport { uploadImageToCloudinary } from '../utils/cloudinary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/**\r\n * Save user profile to Firestore\r\n */\nconst saveUserProfile = async (user, additionalData = {}) => {\n  if (!user) return;\n  const userRef = doc(db, 'users', user.uid);\n  const userSnap = await getDoc(userRef);\n  if (!userSnap.exists()) {\n    const {\n      displayName,\n      email,\n      photoURL\n    } = user;\n    const createdAt = serverTimestamp();\n    try {\n      var _user$providerData$;\n      await setDoc(userRef, {\n        uid: user.uid,\n        displayName: displayName || (email === null || email === void 0 ? void 0 : email.split('@')[0]) || 'User',\n        email,\n        photoURL: photoURL || '',\n        provider: ((_user$providerData$ = user.providerData[0]) === null || _user$providerData$ === void 0 ? void 0 : _user$providerData$.providerId) || 'email',\n        role: 'renter',\n        // Default role\n        verified: false,\n        createdAt,\n        updatedAt: createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error('Error saving user profile:', error);\n      throw error;\n    }\n  }\n  return userRef;\n};\n\n/**\r\n * Get user profile from Firestore\r\n */\nconst getUserProfile = async uid => {\n  try {\n    const userRef = doc(db, 'users', uid);\n    const userSnap = await getDoc(userRef);\n    if (userSnap.exists()) {\n      return userSnap.data();\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting user profile:', error);\n    throw error;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  /**\r\n   * Sign up with email and password\r\n   */\n  const signUpWithEmailAndPassword = async (email, password, displayName, role = 'renter', profileImage) => {\n    try {\n      const {\n        user\n      } = await createUserWithEmailAndPassword(auth, email, password);\n      let photoURL = '';\n\n      // Upload profile image if provided\n      if (profileImage) {\n        try {\n          photoURL = await uploadImageToCloudinary(profileImage);\n        } catch (error) {\n          console.warn('Failed to upload profile image:', error);\n        }\n      }\n\n      // Update user profile\n      await updateProfile(user, {\n        displayName,\n        photoURL\n      });\n\n      // Save to Firestore\n      await saveUserProfile(user, {\n        displayName,\n        photoURL,\n        role\n      });\n      return user;\n    } catch (error) {\n      console.error('Sign up error:', error);\n      throw error;\n    }\n  };\n\n  /**\r\n   * Sign in with email and password\r\n   */\n  const signInWithEmailAndPasswordAuth = async (email, password) => {\n    try {\n      const {\n        user\n      } = await signInWithEmailAndPassword(auth, email, password);\n\n      // Ensure user profile exists in Firestore\n      await saveUserProfile(user);\n      return user;\n    } catch (error) {\n      console.error('Sign in error:', error);\n      throw error;\n    }\n  };\n\n  /**\r\n   * Sign in with Google\r\n   */\n  const signInWithGoogle = async () => {\n    try {\n      const {\n        user\n      } = await signInWithPopup(auth, googleProvider);\n\n      // Save user profile to Firestore\n      await saveUserProfile(user, {\n        provider: 'google'\n      });\n      return user;\n    } catch (error) {\n      console.error('Google sign in error:', error);\n      throw error;\n    }\n  };\n\n  /**\r\n   * Sign out user\r\n   */\n  const signOutUser = async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw error;\n    }\n  };\n\n  /**\r\n   * Send password reset email\r\n   */\n  const sendPasswordReset = async email => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      setCurrentUser(user);\n      if (user) {\n        try {\n          const profile = await getUserProfile(user.uid);\n          setUserProfile(profile);\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      } else {\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    userProfile,\n    loading,\n    login: signInWithEmailAndPasswordAuth,\n    signup: signUpWithEmailAndPassword,\n    loginWithGoogle: signInWithGoogle,\n    logout: signOutUser,\n    resetPassword: sendPasswordReset\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"bTkDkafiPCgjmH9o6GheLT4aXjI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","onAuthStateChanged","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","signOut","updateProfile","sendPasswordResetEmail","doc","setDoc","getDoc","serverTimestamp","auth","googleProvider","db","uploadImageToCloudinary","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","saveUserProfile","user","additionalData","userRef","uid","userSnap","exists","displayName","email","photoURL","createdAt","_user$providerData$","split","provider","providerData","providerId","role","verified","updatedAt","error","console","getUserProfile","data","AuthProvider","children","_s2","currentUser","setCurrentUser","userProfile","setUserProfile","loading","setLoading","signUpWithEmailAndPassword","password","profileImage","warn","signInWithEmailAndPasswordAuth","signInWithGoogle","signOutUser","sendPasswordReset","unsubscribe","profile","value","login","signup","loginWithGoogle","logout","resetPassword","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["J:/Github/Rent Easy GH/ghana-rental-platform/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\nimport { User as FirebaseUser, onAuthStateChanged } from 'firebase/auth';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signInWithPopup, \r\n  signOut,\r\n  updateProfile,\r\n  sendPasswordResetEmail\r\n} from 'firebase/auth';\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, googleProvider, db } from '../config/firebase';\r\nimport { uploadImageToCloudinary } from '../utils/cloudinary';\r\n\r\nexport interface UserProfile {\r\n  uid: string;\r\n  email: string;\r\n  displayName: string;\r\n  photoURL?: string;\r\n  provider: string;\r\n  role: 'landlord' | 'renter' | 'admin';\r\n  verified: boolean;\r\n  createdAt: any;\r\n  updatedAt: any;\r\n}\r\n\r\ninterface AuthContextType {\r\n  currentUser: FirebaseUser | null;\r\n  userProfile: UserProfile | null;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<FirebaseUser>;\r\n  signup: (email: string, password: string, displayName: string, role?: 'landlord' | 'renter', profileImage?: File) => Promise<FirebaseUser>;\r\n  loginWithGoogle: () => Promise<FirebaseUser>;\r\n  logout: () => Promise<void>;\r\n  resetPassword: (email: string) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * Save user profile to Firestore\r\n */\r\nconst saveUserProfile = async (user: FirebaseUser, additionalData: any = {}) => {\r\n  if (!user) return;\r\n  \r\n  const userRef = doc(db, 'users', user.uid);\r\n  const userSnap = await getDoc(userRef);\r\n  \r\n  if (!userSnap.exists()) {\r\n    const { displayName, email, photoURL } = user;\r\n    const createdAt = serverTimestamp();\r\n    \r\n    try {\r\n      await setDoc(userRef, {\r\n        uid: user.uid,\r\n        displayName: displayName || email?.split('@')[0] || 'User',\r\n        email,\r\n        photoURL: photoURL || '',\r\n        provider: user.providerData[0]?.providerId || 'email',\r\n        role: 'renter', // Default role\r\n        verified: false,\r\n        createdAt,\r\n        updatedAt: createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving user profile:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  return userRef;\r\n};\r\n\r\n/**\r\n * Get user profile from Firestore\r\n */\r\nconst getUserProfile = async (uid: string): Promise<UserProfile | null> => {\r\n  try {\r\n    const userRef = doc(db, 'users', uid);\r\n    const userSnap = await getDoc(userRef);\r\n    \r\n    if (userSnap.exists()) {\r\n      return userSnap.data() as UserProfile;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting user profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState<FirebaseUser | null>(null);\r\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  /**\r\n   * Sign up with email and password\r\n   */\r\n  const signUpWithEmailAndPassword = async (\r\n    email: string, \r\n    password: string, \r\n    displayName: string,\r\n    role: 'landlord' | 'renter' = 'renter',\r\n    profileImage?: File\r\n  ) => {\r\n    try {\r\n      const { user } = await createUserWithEmailAndPassword(auth, email, password);\r\n      \r\n      let photoURL = '';\r\n      \r\n      // Upload profile image if provided\r\n      if (profileImage) {\r\n        try {\r\n          photoURL = await uploadImageToCloudinary(profileImage);\r\n        } catch (error) {\r\n          console.warn('Failed to upload profile image:', error);\r\n        }\r\n      }\r\n      \r\n      // Update user profile\r\n      await updateProfile(user, {\r\n        displayName,\r\n        photoURL\r\n      });\r\n      \r\n      // Save to Firestore\r\n      await saveUserProfile(user, { \r\n        displayName, \r\n        photoURL,\r\n        role \r\n      });\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error('Sign up error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Sign in with email and password\r\n   */\r\n  const signInWithEmailAndPasswordAuth = async (email: string, password: string) => {\r\n    try {\r\n      const { user } = await signInWithEmailAndPassword(auth, email, password);\r\n      \r\n      // Ensure user profile exists in Firestore\r\n      await saveUserProfile(user);\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error('Sign in error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Sign in with Google\r\n   */\r\n  const signInWithGoogle = async () => {\r\n    try {\r\n      const { user } = await signInWithPopup(auth, googleProvider);\r\n      \r\n      // Save user profile to Firestore\r\n      await saveUserProfile(user, {\r\n        provider: 'google'\r\n      });\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error('Google sign in error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Sign out user\r\n   */\r\n  const signOutUser = async () => {\r\n    try {\r\n      await signOut(auth);\r\n    } catch (error) {\r\n      console.error('Sign out error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Send password reset email\r\n   */\r\n  const sendPasswordReset = async (email: string) => {\r\n    try {\r\n      await sendPasswordResetEmail(auth, email);\r\n    } catch (error) {\r\n      console.error('Password reset error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      setCurrentUser(user);\r\n      \r\n      if (user) {\r\n        try {\r\n          const profile = await getUserProfile(user.uid);\r\n          setUserProfile(profile);\r\n        } catch (error) {\r\n          console.error('Error fetching user profile:', error);\r\n        }\r\n      } else {\r\n        setUserProfile(null);\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value: AuthContextType = {\r\n    currentUser,\r\n    userProfile,\r\n    loading,\r\n    login: signInWithEmailAndPasswordAuth,\r\n    signup: signUpWithEmailAndPassword,\r\n    loginWithGoogle: signInWithGoogle,\r\n    logout: signOutUser,\r\n    resetPassword: sendPasswordReset\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}