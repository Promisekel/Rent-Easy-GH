{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile, sendPasswordResetEmail } from 'firebase/auth';\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\nimport { auth, googleProvider, db } from '../config/firebase';\nimport { uploadImageToCloudinary } from '../utils/cloudinary';\n/**\r\n * Save user profile to Firestore\r\n */\nexport const saveUserProfile = async (user, additionalData = {}) => {\n  if (!user) return;\n  const userRef = doc(db, 'users', user.uid);\n  const userSnap = await getDoc(userRef);\n  if (!userSnap.exists()) {\n    const {\n      displayName,\n      email,\n      photoURL\n    } = user;\n    const createdAt = serverTimestamp();\n    try {\n      var _user$providerData$;\n      await setDoc(userRef, {\n        uid: user.uid,\n        displayName: displayName || (email === null || email === void 0 ? void 0 : email.split('@')[0]) || 'User',\n        email,\n        photoURL: photoURL || '',\n        provider: ((_user$providerData$ = user.providerData[0]) === null || _user$providerData$ === void 0 ? void 0 : _user$providerData$.providerId) || 'email',\n        role: 'renter',\n        // Default role\n        verified: false,\n        createdAt,\n        updatedAt: createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error('Error saving user profile:', error);\n      throw error;\n    }\n  }\n  return userRef;\n};\n\n/**\r\n * Sign up with email and password\r\n */\nexport const signUpWithEmailAndPassword = async (email, password, displayName, role = 'renter', profileImage) => {\n  try {\n    const {\n      user\n    } = await createUserWithEmailAndPassword(auth, email, password);\n    let photoURL = '';\n\n    // Upload profile image if provided\n    if (profileImage) {\n      try {\n        photoURL = await uploadImageToCloudinary(profileImage);\n      } catch (error) {\n        console.warn('Failed to upload profile image:', error);\n      }\n    }\n\n    // Update user profile\n    await updateProfile(user, {\n      displayName,\n      photoURL\n    });\n\n    // Save to Firestore\n    await saveUserProfile(user, {\n      displayName,\n      photoURL,\n      role\n    });\n    return user;\n  } catch (error) {\n    console.error('Sign up error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Sign in with email and password\r\n */\nexport const signInWithEmailAndPasswordAuth = async (email, password) => {\n  try {\n    const {\n      user\n    } = await signInWithEmailAndPassword(auth, email, password);\n\n    // Ensure user profile exists in Firestore\n    await saveUserProfile(user);\n    return user;\n  } catch (error) {\n    console.error('Sign in error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Sign in with Google\r\n */\nexport const signInWithGoogle = async () => {\n  try {\n    const {\n      user\n    } = await signInWithPopup(auth, googleProvider);\n\n    // Save user profile to Firestore\n    await saveUserProfile(user, {\n      provider: 'google'\n    });\n    return user;\n  } catch (error) {\n    console.error('Google sign in error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Sign out user\r\n */\nexport const signOutUser = async () => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error('Sign out error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send password reset email\r\n */\nexport const sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n  } catch (error) {\n    console.error('Password reset error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get user profile from Firestore\r\n */\nexport const getUserProfile = async uid => {\n  try {\n    const userRef = doc(db, 'users', uid);\n    const userSnap = await getDoc(userRef);\n    if (userSnap.exists()) {\n      return userSnap.data();\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting user profile:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","signOut","updateProfile","sendPasswordResetEmail","doc","setDoc","getDoc","serverTimestamp","auth","googleProvider","db","uploadImageToCloudinary","saveUserProfile","user","additionalData","userRef","uid","userSnap","exists","displayName","email","photoURL","createdAt","_user$providerData$","split","provider","providerData","providerId","role","verified","updatedAt","error","console","signUpWithEmailAndPassword","password","profileImage","warn","signInWithEmailAndPasswordAuth","signInWithGoogle","signOutUser","sendPasswordReset","getUserProfile","data"],"sources":["J:/Github/Rent Easy GH/ghana-rental-platform/src/services/authService.ts"],"sourcesContent":["import { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signInWithPopup, \r\n  signOut,\r\n  updateProfile,\r\n  sendPasswordResetEmail,\r\n  User as FirebaseUser\r\n} from 'firebase/auth';\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, googleProvider, db } from '../config/firebase';\r\nimport { uploadImageToCloudinary } from '../utils/cloudinary';\r\n\r\nexport interface UserProfile {\r\n  uid: string;\r\n  email: string;\r\n  displayName: string;\r\n  photoURL?: string;\r\n  provider: string;\r\n  role: 'landlord' | 'renter' | 'admin';\r\n  verified: boolean;\r\n  createdAt: any;\r\n  updatedAt: any;\r\n}\r\n\r\n/**\r\n * Save user profile to Firestore\r\n */\r\nexport const saveUserProfile = async (user: FirebaseUser, additionalData: any = {}) => {\r\n  if (!user) return;\r\n  \r\n  const userRef = doc(db, 'users', user.uid);\r\n  const userSnap = await getDoc(userRef);\r\n  \r\n  if (!userSnap.exists()) {\r\n    const { displayName, email, photoURL } = user;\r\n    const createdAt = serverTimestamp();\r\n    \r\n    try {\r\n      await setDoc(userRef, {\r\n        uid: user.uid,\r\n        displayName: displayName || email?.split('@')[0] || 'User',\r\n        email,\r\n        photoURL: photoURL || '',\r\n        provider: user.providerData[0]?.providerId || 'email',\r\n        role: 'renter', // Default role\r\n        verified: false,\r\n        createdAt,\r\n        updatedAt: createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving user profile:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  return userRef;\r\n};\r\n\r\n/**\r\n * Sign up with email and password\r\n */\r\nexport const signUpWithEmailAndPassword = async (\r\n  email: string, \r\n  password: string, \r\n  displayName: string,\r\n  role: 'landlord' | 'renter' = 'renter',\r\n  profileImage?: File\r\n) => {\r\n  try {\r\n    const { user } = await createUserWithEmailAndPassword(auth, email, password);\r\n    \r\n    let photoURL = '';\r\n    \r\n    // Upload profile image if provided\r\n    if (profileImage) {\r\n      try {\r\n        photoURL = await uploadImageToCloudinary(profileImage);\r\n      } catch (error) {\r\n        console.warn('Failed to upload profile image:', error);\r\n      }\r\n    }\r\n    \r\n    // Update user profile\r\n    await updateProfile(user, {\r\n      displayName,\r\n      photoURL\r\n    });\r\n    \r\n    // Save to Firestore\r\n    await saveUserProfile(user, { \r\n      displayName, \r\n      photoURL,\r\n      role \r\n    });\r\n    \r\n    return user;\r\n  } catch (error) {\r\n    console.error('Sign up error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign in with email and password\r\n */\r\nexport const signInWithEmailAndPasswordAuth = async (email: string, password: string) => {\r\n  try {\r\n    const { user } = await signInWithEmailAndPassword(auth, email, password);\r\n    \r\n    // Ensure user profile exists in Firestore\r\n    await saveUserProfile(user);\r\n    \r\n    return user;\r\n  } catch (error) {\r\n    console.error('Sign in error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign in with Google\r\n */\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const { user } = await signInWithPopup(auth, googleProvider);\r\n    \r\n    // Save user profile to Firestore\r\n    await saveUserProfile(user, {\r\n      provider: 'google'\r\n    });\r\n    \r\n    return user;\r\n  } catch (error) {\r\n    console.error('Google sign in error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign out user\r\n */\r\nexport const signOutUser = async () => {\r\n  try {\r\n    await signOut(auth);\r\n  } catch (error) {\r\n    console.error('Sign out error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send password reset email\r\n */\r\nexport const sendPasswordReset = async (email: string) => {\r\n  try {\r\n    await sendPasswordResetEmail(auth, email);\r\n  } catch (error) {\r\n    console.error('Password reset error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get user profile from Firestore\r\n */\r\nexport const getUserProfile = async (uid: string): Promise<UserProfile | null> => {\r\n  try {\r\n    const userRef = doc(db, 'users', uid);\r\n    const userSnap = await getDoc(userRef);\r\n    \r\n    if (userSnap.exists()) {\r\n      return userSnap.data() as UserProfile;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting user profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}