{"ast":null,"code":"// Cloudinary configuration and upload service\nconst CLOUDINARY_CONFIG = {\n  cloudName: 'root',\n  apiKey: '416313624663736',\n  apiSecret: 'hyJxqiguS3y0IZjaodpT-BR43DU',\n  uploadPreset: 'rental_images' // You'll need to create this preset in Cloudinary dashboard\n};\n\n/**\r\n * Upload image to Cloudinary\r\n * @param {File} file - The image file to upload\r\n * @param {Function} onProgress - Progress callback (optional)\r\n * @returns {Promise<Object>} - Upload result with URL and metadata\r\n */\nexport const uploadToCloudinary = async (file, onProgress) => {\n  return new Promise((resolve, reject) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('upload_preset', CLOUDINARY_CONFIG.uploadPreset);\n    formData.append('cloud_name', CLOUDINARY_CONFIG.cloudName);\n    const xhr = new XMLHttpRequest();\n\n    // Track upload progress\n    if (onProgress) {\n      xhr.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          const percentComplete = Math.round(event.loaded / event.total * 100);\n          onProgress(percentComplete);\n        }\n      });\n    }\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const response = JSON.parse(xhr.responseText);\n        resolve({\n          url: response.secure_url,\n          publicId: response.public_id,\n          width: response.width,\n          height: response.height,\n          format: response.format,\n          bytes: response.bytes,\n          createdAt: response.created_at\n        });\n      } else {\n        reject(new Error(`Upload failed with status: ${xhr.status}`));\n      }\n    });\n    xhr.addEventListener('error', () => {\n      reject(new Error('Upload failed due to network error'));\n    });\n    xhr.open('POST', `https://api.cloudinary.com/v1_1/${CLOUDINARY_CONFIG.cloudName}/image/upload`);\n    xhr.send(formData);\n  });\n};\n\n/**\r\n * Upload multiple images to Cloudinary\r\n * @param {File[]} files - Array of image files\r\n * @param {Function} onProgress - Progress callback for each file\r\n * @returns {Promise<Object[]>} - Array of upload results\r\n */\nexport const uploadMultipleToCloudinary = async (files, onProgress) => {\n  const uploadPromises = files.map((file, index) => uploadToCloudinary(file, progress => {\n    if (onProgress) onProgress(index, progress);\n  }));\n  try {\n    const results = await Promise.all(uploadPromises);\n    return results;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    throw new Error(`Multiple upload failed: ${errorMessage}`);\n  }\n};\n\n/**\r\n * Delete image from Cloudinary\r\n * @param {string} publicId - The public ID of the image to delete\r\n * @returns {Promise<Object>} - Deletion result\r\n */\nexport const deleteFromCloudinary = async publicId => {\n  try {\n    const formData = new FormData();\n    formData.append('public_id', publicId);\n    formData.append('api_key', CLOUDINARY_CONFIG.apiKey);\n\n    // Note: For deletion, you typically need to implement this on your backend\n    // as it requires the API secret which shouldn't be exposed on the frontend\n    console.warn('Image deletion should be implemented on the backend for security');\n    return {\n      success: false,\n      message: 'Deletion should be handled by backend'\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    throw new Error(`Delete failed: ${errorMessage}`);\n  }\n};\n\n/**\r\n * Generate optimized image URL with transformations\r\n * @param {string} publicId - The public ID of the image\r\n * @param {Object} options - Transformation options\r\n * @returns {string} - Optimized image URL\r\n */\nexport const getOptimizedImageUrl = (publicId, options = {}) => {\n  const {\n    width = 800,\n    height,\n    quality = 'auto',\n    format = 'auto',\n    crop = 'fill'\n  } = options;\n  let transformations = `w_${width}`;\n  if (height) transformations += `,h_${height}`;\n  transformations += `,c_${crop}`;\n  transformations += `,q_${quality}`;\n  transformations += `,f_${format}`;\n  return `https://res.cloudinary.com/${CLOUDINARY_CONFIG.cloudName}/image/upload/${transformations}/${publicId}`;\n};\nexport default {\n  uploadToCloudinary,\n  uploadMultipleToCloudinary,\n  deleteFromCloudinary,\n  getOptimizedImageUrl,\n  config: CLOUDINARY_CONFIG\n};","map":{"version":3,"names":["CLOUDINARY_CONFIG","cloudName","apiKey","apiSecret","uploadPreset","uploadToCloudinary","file","onProgress","Promise","resolve","reject","formData","FormData","append","xhr","XMLHttpRequest","upload","addEventListener","event","lengthComputable","percentComplete","Math","round","loaded","total","status","response","JSON","parse","responseText","url","secure_url","publicId","public_id","width","height","format","bytes","createdAt","created_at","Error","open","send","uploadMultipleToCloudinary","files","uploadPromises","map","index","progress","results","all","error","errorMessage","message","deleteFromCloudinary","console","warn","success","getOptimizedImageUrl","options","quality","crop","transformations","config"],"sources":["J:/Github/Rent Easy GH/ghana-rental-platform/src/services/cloudinary.ts"],"sourcesContent":["// Cloudinary configuration and upload service\r\nconst CLOUDINARY_CONFIG = {\r\n  cloudName: 'root',\r\n  apiKey: '416313624663736',\r\n  apiSecret: 'hyJxqiguS3y0IZjaodpT-BR43DU',\r\n  uploadPreset: 'rental_images' // You'll need to create this preset in Cloudinary dashboard\r\n};\r\n\r\n/**\r\n * Upload image to Cloudinary\r\n * @param {File} file - The image file to upload\r\n * @param {Function} onProgress - Progress callback (optional)\r\n * @returns {Promise<Object>} - Upload result with URL and metadata\r\n */\r\nexport const uploadToCloudinary = async (file: File, onProgress?: (progress: number) => void) => {\r\n  return new Promise((resolve, reject) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('upload_preset', CLOUDINARY_CONFIG.uploadPreset);\r\n    formData.append('cloud_name', CLOUDINARY_CONFIG.cloudName);\r\n\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Track upload progress\r\n    if (onProgress) {\r\n      xhr.upload.addEventListener('progress', (event) => {\r\n        if (event.lengthComputable) {\r\n          const percentComplete = Math.round((event.loaded / event.total) * 100);\r\n          onProgress(percentComplete);\r\n        }\r\n      });\r\n    }\r\n\r\n    xhr.addEventListener('load', () => {\r\n      if (xhr.status === 200) {\r\n        const response = JSON.parse(xhr.responseText);\r\n        resolve({\r\n          url: response.secure_url,\r\n          publicId: response.public_id,\r\n          width: response.width,\r\n          height: response.height,\r\n          format: response.format,\r\n          bytes: response.bytes,\r\n          createdAt: response.created_at\r\n        });\r\n      } else {\r\n        reject(new Error(`Upload failed with status: ${xhr.status}`));\r\n      }\r\n    });\r\n\r\n    xhr.addEventListener('error', () => {\r\n      reject(new Error('Upload failed due to network error'));\r\n    });\r\n\r\n    xhr.open('POST', `https://api.cloudinary.com/v1_1/${CLOUDINARY_CONFIG.cloudName}/image/upload`);\r\n    xhr.send(formData);\r\n  });\r\n};\r\n\r\n/**\r\n * Upload multiple images to Cloudinary\r\n * @param {File[]} files - Array of image files\r\n * @param {Function} onProgress - Progress callback for each file\r\n * @returns {Promise<Object[]>} - Array of upload results\r\n */\r\nexport const uploadMultipleToCloudinary = async (\r\n  files: File[], \r\n  onProgress?: (fileIndex: number, progress: number) => void\r\n) => {\r\n  const uploadPromises = files.map((file, index) => \r\n    uploadToCloudinary(file, (progress) => {\r\n      if (onProgress) onProgress(index, progress);\r\n    })\r\n  );\r\n\r\n  try {\r\n    const results = await Promise.all(uploadPromises);\r\n    return results;\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n    throw new Error(`Multiple upload failed: ${errorMessage}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Delete image from Cloudinary\r\n * @param {string} publicId - The public ID of the image to delete\r\n * @returns {Promise<Object>} - Deletion result\r\n */\r\nexport const deleteFromCloudinary = async (publicId: string) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('public_id', publicId);\r\n    formData.append('api_key', CLOUDINARY_CONFIG.apiKey);\r\n    \r\n    // Note: For deletion, you typically need to implement this on your backend\r\n    // as it requires the API secret which shouldn't be exposed on the frontend\r\n    console.warn('Image deletion should be implemented on the backend for security');\r\n    \r\n    return { success: false, message: 'Deletion should be handled by backend' };\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n    throw new Error(`Delete failed: ${errorMessage}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Generate optimized image URL with transformations\r\n * @param {string} publicId - The public ID of the image\r\n * @param {Object} options - Transformation options\r\n * @returns {string} - Optimized image URL\r\n */\r\nexport const getOptimizedImageUrl = (\r\n  publicId: string, \r\n  options: {\r\n    width?: number;\r\n    height?: number;\r\n    quality?: 'auto' | number;\r\n    format?: 'auto' | 'webp' | 'jpg' | 'png';\r\n    crop?: 'fill' | 'fit' | 'scale' | 'crop';\r\n  } = {}\r\n) => {\r\n  const {\r\n    width = 800,\r\n    height,\r\n    quality = 'auto',\r\n    format = 'auto',\r\n    crop = 'fill'\r\n  } = options;\r\n\r\n  let transformations = `w_${width}`;\r\n  if (height) transformations += `,h_${height}`;\r\n  transformations += `,c_${crop}`;\r\n  transformations += `,q_${quality}`;\r\n  transformations += `,f_${format}`;\r\n\r\n  return `https://res.cloudinary.com/${CLOUDINARY_CONFIG.cloudName}/image/upload/${transformations}/${publicId}`;\r\n};\r\n\r\nexport default {\r\n  uploadToCloudinary,\r\n  uploadMultipleToCloudinary,\r\n  deleteFromCloudinary,\r\n  getOptimizedImageUrl,\r\n  config: CLOUDINARY_CONFIG\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAG;EACxBC,SAAS,EAAE,MAAM;EACjBC,MAAM,EAAE,iBAAiB;EACzBC,SAAS,EAAE,6BAA6B;EACxCC,YAAY,EAAE,eAAe,CAAC;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,IAAU,EAAEC,UAAuC,KAAK;EAC/F,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEP,IAAI,CAAC;IAC7BK,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEb,iBAAiB,CAACI,YAAY,CAAC;IAChEO,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEb,iBAAiB,CAACC,SAAS,CAAC;IAE1D,MAAMa,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;;IAEhC;IACA,IAAIR,UAAU,EAAE;MACdO,GAAG,CAACE,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAGC,KAAK,IAAK;QACjD,IAAIA,KAAK,CAACC,gBAAgB,EAAE;UAC1B,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAAEJ,KAAK,CAACK,MAAM,GAAGL,KAAK,CAACM,KAAK,GAAI,GAAG,CAAC;UACtEjB,UAAU,CAACa,eAAe,CAAC;QAC7B;MACF,CAAC,CAAC;IACJ;IAEAN,GAAG,CAACG,gBAAgB,CAAC,MAAM,EAAE,MAAM;MACjC,IAAIH,GAAG,CAACW,MAAM,KAAK,GAAG,EAAE;QACtB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACd,GAAG,CAACe,YAAY,CAAC;QAC7CpB,OAAO,CAAC;UACNqB,GAAG,EAAEJ,QAAQ,CAACK,UAAU;UACxBC,QAAQ,EAAEN,QAAQ,CAACO,SAAS;UAC5BC,KAAK,EAAER,QAAQ,CAACQ,KAAK;UACrBC,MAAM,EAAET,QAAQ,CAACS,MAAM;UACvBC,MAAM,EAAEV,QAAQ,CAACU,MAAM;UACvBC,KAAK,EAAEX,QAAQ,CAACW,KAAK;UACrBC,SAAS,EAAEZ,QAAQ,CAACa;QACtB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL7B,MAAM,CAAC,IAAI8B,KAAK,CAAC,8BAA8B1B,GAAG,CAACW,MAAM,EAAE,CAAC,CAAC;MAC/D;IACF,CAAC,CAAC;IAEFX,GAAG,CAACG,gBAAgB,CAAC,OAAO,EAAE,MAAM;MAClCP,MAAM,CAAC,IAAI8B,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACzD,CAAC,CAAC;IAEF1B,GAAG,CAAC2B,IAAI,CAAC,MAAM,EAAE,mCAAmCzC,iBAAiB,CAACC,SAAS,eAAe,CAAC;IAC/Fa,GAAG,CAAC4B,IAAI,CAAC/B,QAAQ,CAAC;EACpB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgC,0BAA0B,GAAG,MAAAA,CACxCC,KAAa,EACbrC,UAA0D,KACvD;EACH,MAAMsC,cAAc,GAAGD,KAAK,CAACE,GAAG,CAAC,CAACxC,IAAI,EAAEyC,KAAK,KAC3C1C,kBAAkB,CAACC,IAAI,EAAG0C,QAAQ,IAAK;IACrC,IAAIzC,UAAU,EAAEA,UAAU,CAACwC,KAAK,EAAEC,QAAQ,CAAC;EAC7C,CAAC,CACH,CAAC;EAED,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMzC,OAAO,CAAC0C,GAAG,CAACL,cAAc,CAAC;IACjD,OAAOI,OAAO;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMC,YAAY,GAAGD,KAAK,YAAYX,KAAK,GAAGW,KAAK,CAACE,OAAO,GAAG,wBAAwB;IACtF,MAAM,IAAIb,KAAK,CAAC,2BAA2BY,YAAY,EAAE,CAAC;EAC5D;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,oBAAoB,GAAG,MAAOtB,QAAgB,IAAK;EAC9D,IAAI;IACF,MAAMrB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEmB,QAAQ,CAAC;IACtCrB,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEb,iBAAiB,CAACE,MAAM,CAAC;;IAEpD;IACA;IACAqD,OAAO,CAACC,IAAI,CAAC,kEAAkE,CAAC;IAEhF,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEJ,OAAO,EAAE;IAAwC,CAAC;EAC7E,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd,MAAMC,YAAY,GAAGD,KAAK,YAAYX,KAAK,GAAGW,KAAK,CAACE,OAAO,GAAG,wBAAwB;IACtF,MAAM,IAAIb,KAAK,CAAC,kBAAkBY,YAAY,EAAE,CAAC;EACnD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,oBAAoB,GAAGA,CAClC1B,QAAgB,EAChB2B,OAMC,GAAG,CAAC,CAAC,KACH;EACH,MAAM;IACJzB,KAAK,GAAG,GAAG;IACXC,MAAM;IACNyB,OAAO,GAAG,MAAM;IAChBxB,MAAM,GAAG,MAAM;IACfyB,IAAI,GAAG;EACT,CAAC,GAAGF,OAAO;EAEX,IAAIG,eAAe,GAAG,KAAK5B,KAAK,EAAE;EAClC,IAAIC,MAAM,EAAE2B,eAAe,IAAI,MAAM3B,MAAM,EAAE;EAC7C2B,eAAe,IAAI,MAAMD,IAAI,EAAE;EAC/BC,eAAe,IAAI,MAAMF,OAAO,EAAE;EAClCE,eAAe,IAAI,MAAM1B,MAAM,EAAE;EAEjC,OAAO,8BAA8BpC,iBAAiB,CAACC,SAAS,iBAAiB6D,eAAe,IAAI9B,QAAQ,EAAE;AAChH,CAAC;AAED,eAAe;EACb3B,kBAAkB;EAClBsC,0BAA0B;EAC1BW,oBAAoB;EACpBI,oBAAoB;EACpBK,MAAM,EAAE/D;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}