{"ast":null,"code":"// Cloudinary configuration and upload utilities\nconst CLOUDINARY_CLOUD_NAME=process.env.REACT_APP_CLOUDINARY_CLOUD_NAME||\"your-cloud-name\";const CLOUDINARY_UPLOAD_PRESET=process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESET||\"unsigned_upload_preset\";/**\r\n * Upload image to Cloudinary using unsigned upload\r\n * @param {File} file - The image file to upload\r\n * @returns {Promise<string>} - URL of uploaded image\r\n */export const uploadImageToCloudinary=async file=>{if(!file)throw new Error('No file provided');const formData=new FormData();formData.append('file',file);formData.append('upload_preset',CLOUDINARY_UPLOAD_PRESET);formData.append('cloud_name',CLOUDINARY_CLOUD_NAME);try{const response=await fetch(`https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`,{method:'POST',body:formData});if(!response.ok){throw new Error('Failed to upload image');}const data=await response.json();return data.secure_url;}catch(error){console.error('Cloudinary upload error:',error);throw new Error('Failed to upload profile image');}};/**\r\n * Validate image file\r\n * @param {File} file - The file to validate\r\n * @returns {boolean} - Whether file is valid\r\n */export const validateImageFile=file=>{const allowedTypes=['image/jpeg','image/jpg','image/png','image/webp'];const maxSize=5*1024*1024;// 5MB\nif(!allowedTypes.includes(file.type)){throw new Error('Please upload a valid image file (JPEG, PNG, WebP)');}if(file.size>maxSize){throw new Error('Image size must be less than 5MB');}return true;};","map":{"version":3,"names":["CLOUDINARY_CLOUD_NAME","process","env","REACT_APP_CLOUDINARY_CLOUD_NAME","CLOUDINARY_UPLOAD_PRESET","REACT_APP_CLOUDINARY_UPLOAD_PRESET","uploadImageToCloudinary","file","Error","formData","FormData","append","response","fetch","method","body","ok","data","json","secure_url","error","console","validateImageFile","allowedTypes","maxSize","includes","type","size"],"sources":["J:/Github/Rent Easy GH/ghana-rental-platform/src/utils/cloudinary.ts"],"sourcesContent":["// Cloudinary configuration and upload utilities\r\nconst CLOUDINARY_CLOUD_NAME = process.env.REACT_APP_CLOUDINARY_CLOUD_NAME || \"your-cloud-name\";\r\nconst CLOUDINARY_UPLOAD_PRESET = process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESET || \"unsigned_upload_preset\";\r\n\r\n/**\r\n * Upload image to Cloudinary using unsigned upload\r\n * @param {File} file - The image file to upload\r\n * @returns {Promise<string>} - URL of uploaded image\r\n */\r\nexport const uploadImageToCloudinary = async (file: File): Promise<string> => {\r\n  if (!file) throw new Error('No file provided');\r\n  \r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\r\n  formData.append('cloud_name', CLOUDINARY_CLOUD_NAME);\r\n  \r\n  try {\r\n    const response = await fetch(\r\n      `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n      {\r\n        method: 'POST',\r\n        body: formData,\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to upload image');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.secure_url;\r\n  } catch (error) {\r\n    console.error('Cloudinary upload error:', error);\r\n    throw new Error('Failed to upload profile image');\r\n  }\r\n};\r\n\r\n/**\r\n * Validate image file\r\n * @param {File} file - The file to validate\r\n * @returns {boolean} - Whether file is valid\r\n */\r\nexport const validateImageFile = (file: File): boolean => {\r\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\r\n  const maxSize = 5 * 1024 * 1024; // 5MB\r\n  \r\n  if (!allowedTypes.includes(file.type)) {\r\n    throw new Error('Please upload a valid image file (JPEG, PNG, WebP)');\r\n  }\r\n  \r\n  if (file.size > maxSize) {\r\n    throw new Error('Image size must be less than 5MB');\r\n  }\r\n  \r\n  return true;\r\n};\r\n"],"mappings":"AAAA;AACA,KAAM,CAAAA,qBAAqB,CAAGC,OAAO,CAACC,GAAG,CAACC,+BAA+B,EAAI,iBAAiB,CAC9F,KAAM,CAAAC,wBAAwB,CAAGH,OAAO,CAACC,GAAG,CAACG,kCAAkC,EAAI,wBAAwB,CAE3G;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,uBAAuB,CAAG,KAAO,CAAAC,IAAU,EAAsB,CAC5E,GAAI,CAACA,IAAI,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,kBAAkB,CAAC,CAE9C,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEJ,IAAI,CAAC,CAC7BE,QAAQ,CAACE,MAAM,CAAC,eAAe,CAAEP,wBAAwB,CAAC,CAC1DK,QAAQ,CAACE,MAAM,CAAC,YAAY,CAAEX,qBAAqB,CAAC,CAEpD,GAAI,CACF,KAAM,CAAAY,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAC1B,mCAAmCb,qBAAqB,eAAe,CACvE,CACEc,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEN,QACR,CACF,CAAC,CAED,GAAI,CAACG,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAR,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA,KAAM,CAAAS,IAAI,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CAACE,UAAU,CACxB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,IAAI,CAAAZ,KAAK,CAAC,gCAAgC,CAAC,CACnD,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAc,iBAAiB,CAAIf,IAAU,EAAc,CACxD,KAAM,CAAAgB,YAAY,CAAG,CAAC,YAAY,CAAE,WAAW,CAAE,WAAW,CAAE,YAAY,CAAC,CAC3E,KAAM,CAAAC,OAAO,CAAG,CAAC,CAAG,IAAI,CAAG,IAAI,CAAE;AAEjC,GAAI,CAACD,YAAY,CAACE,QAAQ,CAAClB,IAAI,CAACmB,IAAI,CAAC,CAAE,CACrC,KAAM,IAAI,CAAAlB,KAAK,CAAC,oDAAoD,CAAC,CACvE,CAEA,GAAID,IAAI,CAACoB,IAAI,CAAGH,OAAO,CAAE,CACvB,KAAM,IAAI,CAAAhB,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAEA,MAAO,KAAI,CACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}