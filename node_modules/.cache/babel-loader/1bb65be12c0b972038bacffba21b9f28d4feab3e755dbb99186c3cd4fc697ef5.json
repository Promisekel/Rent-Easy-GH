{"ast":null,"code":"import{createUserWithEmailAndPassword,signInWithEmailAndPassword,signInWithPopup,signOut,updateProfile,sendPasswordResetEmail}from'firebase/auth';import{doc,setDoc,getDoc,serverTimestamp}from'firebase/firestore';import{auth,googleProvider,db}from'../config/firebase';import{uploadImageToCloudinary}from'../utils/cloudinary';/**\r\n * Save user profile to Firestore\r\n */export const saveUserProfile=async function(user){let additionalData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!user)return;const userRef=doc(db,'users',user.uid);const userSnap=await getDoc(userRef);if(!userSnap.exists()){const{displayName,email,photoURL}=user;const createdAt=serverTimestamp();try{var _user$providerData$;await setDoc(userRef,{uid:user.uid,displayName:displayName||(email===null||email===void 0?void 0:email.split('@')[0])||'User',email,photoURL:photoURL||'',provider:((_user$providerData$=user.providerData[0])===null||_user$providerData$===void 0?void 0:_user$providerData$.providerId)||'email',role:'renter',// Default role\nverified:false,createdAt,updatedAt:createdAt,...additionalData});}catch(error){console.error('Error saving user profile:',error);throw error;}}return userRef;};/**\r\n * Sign up with email and password\r\n */export const signUpWithEmailAndPassword=async function(email,password,displayName){let role=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'renter';let profileImage=arguments.length>4?arguments[4]:undefined;try{const{user}=await createUserWithEmailAndPassword(auth,email,password);let photoURL='';// Upload profile image if provided\nif(profileImage){try{photoURL=await uploadImageToCloudinary(profileImage);}catch(error){console.warn('Failed to upload profile image:',error);}}// Update user profile\nawait updateProfile(user,{displayName,photoURL});// Save to Firestore\nawait saveUserProfile(user,{displayName,photoURL,role});return user;}catch(error){console.error('Sign up error:',error);throw error;}};/**\r\n * Sign in with email and password\r\n */export const signInWithEmailAndPasswordAuth=async(email,password)=>{try{const{user}=await signInWithEmailAndPassword(auth,email,password);// Ensure user profile exists in Firestore\nawait saveUserProfile(user);return user;}catch(error){console.error('Sign in error:',error);throw error;}};/**\r\n * Sign in with Google\r\n */export const signInWithGoogle=async()=>{try{const{user}=await signInWithPopup(auth,googleProvider);// Save user profile to Firestore\nawait saveUserProfile(user,{provider:'google'});return user;}catch(error){console.error('Google sign in error:',error);throw error;}};/**\r\n * Sign out user\r\n */export const signOutUser=async()=>{try{await signOut(auth);}catch(error){console.error('Sign out error:',error);throw error;}};/**\r\n * Send password reset email\r\n */export const sendPasswordReset=async email=>{try{await sendPasswordResetEmail(auth,email);}catch(error){console.error('Password reset error:',error);throw error;}};/**\r\n * Get user profile from Firestore\r\n */export const getUserProfile=async uid=>{try{const userRef=doc(db,'users',uid);const userSnap=await getDoc(userRef);if(userSnap.exists()){return userSnap.data();}return null;}catch(error){console.error('Error getting user profile:',error);throw error;}};","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","signOut","updateProfile","sendPasswordResetEmail","doc","setDoc","getDoc","serverTimestamp","auth","googleProvider","db","uploadImageToCloudinary","saveUserProfile","user","additionalData","arguments","length","undefined","userRef","uid","userSnap","exists","displayName","email","photoURL","createdAt","_user$providerData$","split","provider","providerData","providerId","role","verified","updatedAt","error","console","signUpWithEmailAndPassword","password","profileImage","warn","signInWithEmailAndPasswordAuth","signInWithGoogle","signOutUser","sendPasswordReset","getUserProfile","data"],"sources":["J:/Github/Rent Easy GH/ghana-rental-platform/src/services/authService.ts"],"sourcesContent":["import { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signInWithPopup, \r\n  signOut,\r\n  updateProfile,\r\n  sendPasswordResetEmail,\r\n  User as FirebaseUser\r\n} from 'firebase/auth';\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, googleProvider, db } from '../config/firebase';\r\nimport { uploadImageToCloudinary } from '../utils/cloudinary';\r\n\r\nexport interface UserProfile {\r\n  uid: string;\r\n  email: string;\r\n  displayName: string;\r\n  photoURL?: string;\r\n  provider: string;\r\n  role: 'landlord' | 'renter' | 'admin';\r\n  verified: boolean;\r\n  createdAt: any;\r\n  updatedAt: any;\r\n}\r\n\r\n/**\r\n * Save user profile to Firestore\r\n */\r\nexport const saveUserProfile = async (user: FirebaseUser, additionalData: any = {}) => {\r\n  if (!user) return;\r\n  \r\n  const userRef = doc(db, 'users', user.uid);\r\n  const userSnap = await getDoc(userRef);\r\n  \r\n  if (!userSnap.exists()) {\r\n    const { displayName, email, photoURL } = user;\r\n    const createdAt = serverTimestamp();\r\n    \r\n    try {\r\n      await setDoc(userRef, {\r\n        uid: user.uid,\r\n        displayName: displayName || email?.split('@')[0] || 'User',\r\n        email,\r\n        photoURL: photoURL || '',\r\n        provider: user.providerData[0]?.providerId || 'email',\r\n        role: 'renter', // Default role\r\n        verified: false,\r\n        createdAt,\r\n        updatedAt: createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving user profile:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  return userRef;\r\n};\r\n\r\n/**\r\n * Sign up with email and password\r\n */\r\nexport const signUpWithEmailAndPassword = async (\r\n  email: string, \r\n  password: string, \r\n  displayName: string,\r\n  role: 'landlord' | 'renter' = 'renter',\r\n  profileImage?: File\r\n) => {\r\n  try {\r\n    const { user } = await createUserWithEmailAndPassword(auth, email, password);\r\n    \r\n    let photoURL = '';\r\n    \r\n    // Upload profile image if provided\r\n    if (profileImage) {\r\n      try {\r\n        photoURL = await uploadImageToCloudinary(profileImage);\r\n      } catch (error) {\r\n        console.warn('Failed to upload profile image:', error);\r\n      }\r\n    }\r\n    \r\n    // Update user profile\r\n    await updateProfile(user, {\r\n      displayName,\r\n      photoURL\r\n    });\r\n    \r\n    // Save to Firestore\r\n    await saveUserProfile(user, { \r\n      displayName, \r\n      photoURL,\r\n      role \r\n    });\r\n    \r\n    return user;\r\n  } catch (error) {\r\n    console.error('Sign up error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign in with email and password\r\n */\r\nexport const signInWithEmailAndPasswordAuth = async (email: string, password: string) => {\r\n  try {\r\n    const { user } = await signInWithEmailAndPassword(auth, email, password);\r\n    \r\n    // Ensure user profile exists in Firestore\r\n    await saveUserProfile(user);\r\n    \r\n    return user;\r\n  } catch (error) {\r\n    console.error('Sign in error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign in with Google\r\n */\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const { user } = await signInWithPopup(auth, googleProvider);\r\n    \r\n    // Save user profile to Firestore\r\n    await saveUserProfile(user, {\r\n      provider: 'google'\r\n    });\r\n    \r\n    return user;\r\n  } catch (error) {\r\n    console.error('Google sign in error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign out user\r\n */\r\nexport const signOutUser = async () => {\r\n  try {\r\n    await signOut(auth);\r\n  } catch (error) {\r\n    console.error('Sign out error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send password reset email\r\n */\r\nexport const sendPasswordReset = async (email: string) => {\r\n  try {\r\n    await sendPasswordResetEmail(auth, email);\r\n  } catch (error) {\r\n    console.error('Password reset error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get user profile from Firestore\r\n */\r\nexport const getUserProfile = async (uid: string): Promise<UserProfile | null> => {\r\n  try {\r\n    const userRef = doc(db, 'users', uid);\r\n    const userSnap = await getDoc(userRef);\r\n    \r\n    if (userSnap.exists()) {\r\n      return userSnap.data() as UserProfile;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting user profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}