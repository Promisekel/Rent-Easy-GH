{"ast":null,"code":"var _jsxFileName = \"J:\\\\Github\\\\Rent Easy GH\\\\ghana-rental-platform\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../config/firebase';\nimport { getUserProfile } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Import auth functions dynamically to avoid circular dependencies\n  const signUpWithEmailAndPassword = async (email, password, displayName, role = 'renter', profileImage) => {\n    const {\n      signUpWithEmailAndPassword: signUp\n    } = await import('../services/authService');\n    return signUp(email, password, displayName, role, profileImage);\n  };\n  const signInWithEmailAndPasswordAuth = async (email, password) => {\n    const {\n      signInWithEmailAndPasswordAuth: signIn\n    } = await import('../services/authService');\n    return signIn(email, password);\n  };\n  const signInWithGoogle = async () => {\n    const {\n      signInWithGoogle: googleSignIn\n    } = await import('../services/authService');\n    return googleSignIn();\n  };\n  const signOutUser = async () => {\n    const {\n      signOutUser: signOut\n    } = await import('../services/authService');\n    await signOut();\n  };\n  const sendPasswordReset = async email => {\n    const {\n      sendPasswordReset\n    } = await import('../services/authService');\n    return sendPasswordReset(email);\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      setCurrentUser(user);\n      if (user) {\n        try {\n          const profile = await getUserProfile(user.uid);\n          setUserProfile(profile);\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      } else {\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    userProfile,\n    loading,\n    login: signInWithEmailAndPasswordAuth,\n    signup: signUpWithEmailAndPassword,\n    loginWithGoogle: signInWithGoogle,\n    logout: signOutUser,\n    resetPassword: sendPasswordReset\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"bTkDkafiPCgjmH9o6GheLT4aXjI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","onAuthStateChanged","auth","getUserProfile","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","userProfile","setUserProfile","loading","setLoading","signUpWithEmailAndPassword","email","password","displayName","role","profileImage","signUp","signInWithEmailAndPasswordAuth","signIn","signInWithGoogle","googleSignIn","signOutUser","signOut","sendPasswordReset","unsubscribe","user","profile","uid","error","console","value","login","signup","loginWithGoogle","logout","resetPassword","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["J:/Github/Rent Easy GH/ghana-rental-platform/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\nimport { User as FirebaseUser, onAuthStateChanged } from 'firebase/auth';\r\nimport { auth } from '../config/firebase';\r\nimport { getUserProfile, UserProfile } from '../services/authService';\r\n\r\ninterface AuthContextType {\r\n  currentUser: FirebaseUser | null;\r\n  userProfile: UserProfile | null;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<FirebaseUser>;\r\n  signup: (email: string, password: string, displayName: string, role?: 'landlord' | 'renter', profileImage?: File) => Promise<FirebaseUser>;\r\n  loginWithGoogle: () => Promise<FirebaseUser>;\r\n  logout: () => Promise<void>;\r\n  resetPassword: (email: string) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState<FirebaseUser | null>(null);\r\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Import auth functions dynamically to avoid circular dependencies\r\n  const signUpWithEmailAndPassword = async (\r\n    email: string, \r\n    password: string, \r\n    displayName: string,\r\n    role: 'landlord' | 'renter' = 'renter',\r\n    profileImage?: File\r\n  ) => {\r\n    const { signUpWithEmailAndPassword: signUp } = await import('../services/authService');\r\n    return signUp(email, password, displayName, role, profileImage);\r\n  };\r\n\r\n  const signInWithEmailAndPasswordAuth = async (email: string, password: string) => {\r\n    const { signInWithEmailAndPasswordAuth: signIn } = await import('../services/authService');\r\n    return signIn(email, password);\r\n  };\r\n\r\n  const signInWithGoogle = async () => {\r\n    const { signInWithGoogle: googleSignIn } = await import('../services/authService');\r\n    return googleSignIn();\r\n  };\r\n\r\n  const signOutUser = async () => {\r\n    const { signOutUser: signOut } = await import('../services/authService');\r\n    await signOut();\r\n  };\r\n\r\n  const sendPasswordReset = async (email: string) => {\r\n    const { sendPasswordReset } = await import('../services/authService');\r\n    return sendPasswordReset(email);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      setCurrentUser(user);\r\n      \r\n      if (user) {\r\n        try {\r\n          const profile = await getUserProfile(user.uid);\r\n          setUserProfile(profile);\r\n        } catch (error) {\r\n          console.error('Error fetching user profile:', error);\r\n        }\r\n      } else {\r\n        setUserProfile(null);\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value: AuthContextType = {\r\n    currentUser,\r\n    userProfile,\r\n    loading,\r\n    login: signInWithEmailAndPasswordAuth,\r\n    signup: signUpWithEmailAndPassword,\r\n    loginWithGoogle: signInWithGoogle,\r\n    logout: signOutUser,\r\n    resetPassword: sendPasswordReset\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}